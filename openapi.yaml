openapi: 3.0.3
info:
  title: SOA Lab 1 Swagger - OpenAPI 3.0
  description: |-
    SOA Lab 1 OpenAPI documentation
  contact:
    email: the47iq@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: ticket
    description: Tickets creation, deletion and search
  - name: booking
    description: Booking of the tickets
  - name: coordinates
    description: CRUD operations about coordinates
  - name: person
    description: CRUD operations about person
paths:
  /booking/person/{person-id}/cancel:
    post:
      tags:
        - booking
      summary: Cancel booking of the tickets for person
      description: Sets the owner and the price attributes to null for all tickets owned by a person
      operationId: cancelBooking
      parameters:
        - name: person-id
          in: path
          description: ID of person
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '404':
          description: Person not found
  /booking/sell/{ticket-id}/{person-id}/{price}:
    post:
      tags:
        - booking
      summary: Sell a ticket to a person
      description: Sets the price and the owner attributes and return an updated ticket object information
      operationId: sellTicket
      parameters:
        - name: ticket-id
          in: path
          description: ID of ticket to sell
          required: true
          schema:
            type: integer
            format: int64
        - name: price
          in: path
          description: Price of the ticket
          required: true
          schema:
            type: integer
            format: int32
        - name: person-id
          in: path
          description: ID of person
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Validation exception
        '404':
          description: Either ticket not found or person not found
  /coordinates:
    get: 
      tags:
        - coordinates
      summary: Get list of coordinates
      description: Get list of coordinates
      operationId: getAllCoordinates
      parameters:
        - name: sort
          in: query
          description: Array of fields that are used for sorting. The "-" sign means sorting in descending order. If queries and deletion order are provided for one field (with and without "-"), an error response will be returned.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - x
                - y
                - -id
                - -x
                - -y
        - name: filter
          in: query
          required: false
          description: Array of fields used for filtering. Each element must contain the name of the field and the filtering method in parentheses, as well as the value that will be used for filtering. If the value type is incorrect, an error response will be returned.
          schema:
            type: array
            items:
              type: string
              example: id[eq]=1
              pattern: '^(id|x|y)\[(eq|ne|gt|lt|lte|gte)\]=.+$'
          explode: true
        - name: page
          in: query
          required: false
          description: Specifies the page number to be paginated. If used without the "pageSize" parameter, the page size will be 10. If none of the parameters "page" or "pageSize" is used, then all Flats will be returned.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: The specified page size for pagination. If used without the "page" parameter, the first page will be displayed. If none of the parameters "page" or "pageSize" is used, then all Flats will be returned.
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                xml:
                  name: "Coordinates"
                  wrapped: true
                items:
                  $ref: '#/components/schemas/Coordinates'
        '400':
          description: Validation exception
    put:
      tags:
        - coordinates
      summary: Update an existing coordinates
      description: Update an existing coordinates object by Id
      operationId: updateCoordinates
      requestBody:
        description: Update an existent coordinates
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Coordinates'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coordinates'
        '400':
          description: Validation exception
        '404':
          description: Coordinates not found
    post:
      tags:
        - coordinates
      summary: Add new coordinates
      description: Add new coordinates object
      operationId: addCoordinates
      requestBody:
        description: Create a new person
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Coordinates'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coordinates'
        '400':
          description: Validation exception
  /coordinates/{coordinatesId}:
    get:
      tags:
        - coordinates
      summary: Find coordinates by ID
      description: Returns a single coordinates object
      operationId: getCoordinatesById
      parameters:
        - name: coordinatesId
          in: path
          description: ID of coordinates to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coordinates'
        '400':
          description: Invalid ID supplied
        '404':
          description: Coordinates not found
    delete:
      tags:
        - coordinates
      summary: Delete a coordinates
      description: Delete a coordinates object
      operationId: deleteCoordinates
      parameters:
        - name: coordinatesId
          in: path
          description: Coordinates id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Coordinates not found
        '400':
          description: Invalid ID supplied
        '200':
          description: Successful operation
  /person:
    get: 
      tags:
        - person
      summary: Get list of person
      description: Get list of person
      operationId: getAllPerson
      parameters:
        - name: sort
          in: query
          description: Array of fields that are used for sorting. The "-" sign means sorting in descending order. If queries and deletion order are provided for one field (with and without "-"), an error response will be returned.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - weight
                - eyeColor
                - hairColor
                - country
                - -id
                - -weight
                - -eyeColor
                - -hairColor
                - -country
        - name: filter
          in: query
          required: false
          description: Array of fields used for filtering. Each element must contain the name of the field and the filtering method in parentheses, as well as the value that will be used for filtering. If the value type is incorrect, an error response will be returned.
          schema:
            type: array
            items:
              type: string
              example: id[eq]=1
              pattern: '^(id|weight|eyeColor|hairColor|country)\[(eq|ne|gt|lt|lte|gte)\]=.+$'
          explode: true
        - name: page
          in: query
          required: false
          description: Specifies the page number to be paginated. If used without the "pageSize" parameter, the page size will be 10. If none of the parameters "page" or "pageSize" is used, then all Flats will be returned.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: The specified page size for pagination. If used without the "page" parameter, the first page will be displayed. If none of the parameters "page" or "pageSize" is used, then all Flats will be returned.
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                xml:
                  name: "Person"
                  wrapped: true
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: Validation exception
    put:
      tags:
        - person
      summary: Update an existing person
      description: Update an existing person by Id
      operationId: updatePerson
      requestBody:
        description: Update an existent person
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Validation exception
        '404':
          description: Person not found
    post:
      tags:
        - person
      summary: Add a new person
      description: Add a new person
      operationId: addPerson
      requestBody:
        description: Create a new person
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Validation exception
  /person/{personId}:
    get:
      tags:
        - person
      summary: Find person by ID
      description: Returns a single person
      operationId: getPersonById
      parameters:
        - name: personId
          in: path
          description: ID of person to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
    delete:
      tags:
        - person
      summary: Delete a person
      description: delete a person
      operationId: deletePerson
      parameters:
        - name: personId
          in: path
          description: Person id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Person not found
        '400':
          description: Invalid ID supplied
        '200':
          description: Successful operation
  /ticket:
    get: 
      tags:
        - ticket
      summary: Get list of tickets
      description: Get list of tickets
      operationId: getAllTickets
      parameters:
        - name: sort
          in: query
          description: Array of fields that are used for sorting. The "-" sign means sorting in descending order. If queries and deletion order are provided for one field (with and without "-"), an error response will be returned.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - coordinates.x
                - coordinates.y
                - coordinates.id
                - person.id
                - person.weight
                - person.eyeColor
                - person.hairColor
                - person.country
                - name
                - creationDate
                - price
                - discount
                - refundable
                - type
                - -id
                - -coordinates.x
                - -coordinates.y
                - -coordinates.id
                - -person.id
                - -person.weight
                - -person.eyeColor
                - -person.hairColor
                - -person.country
                - -name
                - -creationDate
                - -price
                - -discount
                - -refundable
                - -type
        - name: filter
          in: query
          required: false
          description: Array of fields used for filtering. Each element must contain the name of the field and the filtering method in parentheses, as well as the value that will be used for filtering. If the value type is incorrect, an error response will be returned.
          schema:
            type: array
            items:
              type: string
              example: id[eq]=1
              pattern: '^(id|person\.weight|person\.eyeColor|person\.hairColor|person\.country|person\.id|coordinates\.x|coordinates\.y|coordinates\.id|id|name|creationDate|price|discount|refundable|type)\[(eq|ne|gt|lt|lte|gte)\]=.+$'
          explode: true
        - name: page
          in: query
          required: false
          description: Specifies the page number to be paginated. If used without the "pageSize" parameter, the page size will be 10. If none of the parameters "page" or "pageSize" is used, then all Flats will be returned.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: The specified page size for pagination. If used without the "page" parameter, the first page will be displayed. If none of the parameters "page" or "pageSize" is used, then all Flats will be returned.
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                xml:
                  name: "Ticket"
                  wrapped: true
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          description: Validation exception
        
    put:
      tags:
        - ticket
      summary: Update an existing ticket
      description: Update an existing ticket by Id
      operationId: updateTicket
      requestBody:
        description: Update an existent ticket
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Validation exception
        '404':
          description: Ticket not found
    post:
      tags:
        - ticket
      summary: Add a new ticket
      description: Add a new ticket
      operationId: addTicket
      requestBody:
        description: Create a new ticket
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Validation exception
  /ticket/{ticketId}:
    get:
      tags:
        - ticket
      summary: Find ticket by ID
      description: Returns a single ticket
      operationId: getTicketById
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
    delete:
      tags:
        - ticket
      summary: Delete a ticket
      description: delete a ticket
      operationId: deleteTicket
      parameters:
        - name: ticketId
          in: path
          description: Ticket id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Ticket not found
        '400':
          description: Invalid ID supplied
        '200':
          description: Successful operation
  /ticket/getAverageTicketDiscount:
    get:
      tags:
        - ticket
      summary: Get average discount of tickets
      description: Returns an average discount value
      operationId: getAverageTicketDiscount
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: number
                xml:
                  name: "AveragePriceDiscount"
  /ticket/getMinimalTicketByCreationDate:
    get:
      tags:
        - ticket
      summary: Find minimal ticket by creation date field
      description: Returns a single ticket
      operationId: getMinimalTicketByCreationDate
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Ticket not found
  /ticket/getCheaperTicketsByPrice/{price}:
    get:
      tags:
        - ticket
      summary: Find tickets with the lower price than given
      description: Returns a list of tickets
      operationId: getCheaperTicketsByPrice
      parameters:
        - name: price
          in: path
          description: Minimal price
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                xml:
                  name: "Tickets"
                  wrapped: true
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid price supplied
components:
  schemas:
    Ticket:
      type: object
      xml:
        name: "Ticket"
      properties:
        id:
          type: integer
          format: int64
          example: 10
          minimum: 1
        name:
          type: string
          minLength: 1
          example: Ticket name
        coordinatesId:
          type: integer
          format: int64
          example: 40
        creationDate:
          type: string
          format: date-time
        price:
          type: integer
          format: int32
          minimum: 1
          example: 10
        discount:
          type: integer
          format: int64
          minimum: 1
          maximum: 101
          example: 40
        refundable:
          type: boolean
        type:
          type: string
          enum:
            - VIP
            - USUAL
            - BUDGETARY
            - CHEAP
        personId:
          type: integer
          format: int64
          example: 40
      required:
        - id
        - name
        - coordinates
        - creationDate
        - price
        - refundable
        - person
    Coordinates:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        x:
          type: number
          format: float
          example: 15.0
        y:
          type: number
          format: float
          minimum: -235
          example: 15.0
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        weight:
          type: number
          format: float
          minimum: 1
          example: 150.0
        eyeColor:
          type: string
          enum:
            - GREEN
            - RED
            - ORANGE
        hairColor:
          type: string
          enum:
            - RED
            - YELLOW
            - ORANGE
            - BROWN
        country:
          type: string
          enum:
            - RUSSIA
            - USA
            - FRANCE
            - SPAIN
            - JAPAN
      required:
        - hairColor
