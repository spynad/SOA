openapi: 3.0.3
info:
  title: SOA Lab 1 Collection Service Swagger - OpenAPI 3.0
  description: |-
    SOA Lab 1 Collection Service OpenAPI documentation
  contact:
    email: the47iq@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: ticket
    description: Tickets creation, deletion and search
  - name: coordinates
    description: CRUD operations about coordinates
  - name: person
    description: CRUD operations about person
paths:
  /coordinates:
    get: 
      tags:
        - coordinates
      summary: Get list of coordinates
      description: Get list of coordinates
      operationId: getAllCoordinates
      parameters:
        - name: sort
          in: query
          description: A list of sorting fields is given, with "-" indicating descending order. Providing both ascending and descending instructions will trigger an error response.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - x
                - y
                - -id
                - -x
                - -y
        - name: filter
          in: query
          required: false
          description: An array of filtering fields, each containing the field name, filtering method in parentheses, and the filtering value. Incorrect value types will result in an error response.
          schema:
            type: array
            items:
              type: string
              example: id[eq]=1
              pattern: '^(id|x|y)\[(eq|ne|gt|lt|lte|gte)\]=.+$'
          explode: true
        - name: page
          in: query
          required: false
          description: Specifies the page number for pagination. When used without the "pageSize" parameter, the default page size is set to 10. If neither "page" nor "pageSize" parameters are used, all coordinates will be returned.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: This sets the page size for pagination. When used alone without the "page" parameter, it defaults to displaying the first page. If neither "page" nor "pageSize" parameters are specified, all coordinates will be returned.
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                  $ref: '#/components/schemas/CoordinatesArray'
        '400':
          description: Validation exception
        '500':
          description: Internal error occurred.
    put:
      tags:
        - coordinates
      summary: Update an existing coordinates
      description: Update an existing coordinates object by Id
      operationId: updateCoordinates
      requestBody:
        description: Update an existent coordinates
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Coordinates'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coordinates'
        '400':
          description: Validation exception
        '404':
          description: Coordinates not found
        '500':
          description: Internal error occurred.
    post:
      tags:
        - coordinates
      summary: Add new coordinates
      description: Add new coordinates object
      operationId: addCoordinates
      requestBody:
        description: Create a new person
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Coordinates'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coordinates'
        '400':
          description: Validation exception
        '500':
          description: Internal error occurred.
  /coordinates/{coordinatesId}:
    get:
      tags:
        - coordinates
      summary: Find coordinates by ID
      description: Returns a single coordinates object
      operationId: getCoordinatesById
      parameters:
        - name: coordinatesId
          in: path
          description: ID of coordinates to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Coordinates'
        '400':
          description: Invalid ID supplied
        '404':
          description: Coordinates not found
        '500':
          description: Internal error occurred.
    delete:
      tags:
        - coordinates
      summary: Delete a coordinates
      description: Delete a coordinates object
      operationId: deleteCoordinates
      parameters:
        - name: coordinatesId
          in: path
          description: Coordinates id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Coordinates not found
        '400':
          description: Invalid ID supplied
        '200':
          description: Successful operation
        '500':
          description: Internal error occurred.
  /person:
    get: 
      tags:
        - person
      summary: Get list of person
      description: Get list of person
      operationId: getAllPerson
      parameters:
        - name: sort
          in: query
          description: A list of sorting fields is given, with "-" indicating descending order. Providing both ascending and descending instructions will trigger an error response.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - weight
                - eyeColor
                - hairColor
                - country
                - -id
                - -weight
                - -eyeColor
                - -hairColor
                - -country
        - name: filter
          in: query
          required: false
          description: An array of filtering fields is required, each containing the field name, filtering method in parentheses, and the filtering value. Incorrect value types will result in an error response.
          schema:
            type: array
            items:
              type: string
              example: id[eq]=1
              pattern: '^(id|weight|eyeColor|hairColor|country)\[(eq|ne|gt|lt|lte|gte)\]=.+$'
          explode: true
        - name: page
          in: query
          required: false
          description: Specifies the page number for pagination. When used without the "pageSize" parameter, the default page size is set to 10. If neither "page" nor "pageSize" parameters are used, all tickets will be returned.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: This sets the page size for pagination. When used alone without the "page" parameter, it defaults to displaying the first page. If neither "page" nor "pageSize" parameters are specified, all persons will be returned.
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                  $ref: '#/components/schemas/PersonArray'
        '400':
          description: Validation exception
        '500':
          description: Internal error occurred.
    put:
      tags:
        - person
      summary: Update an existing person
      description: Update an existing person by Id
      operationId: updatePerson
      requestBody:
        description: Update an existent person
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Validation exception
        '404':
          description: Person not found
        '500':
          description: Internal error occurred.
    post:
      tags:
        - person
      summary: Add a new person
      description: Add a new person
      operationId: addPerson
      requestBody:
        description: Create a new person
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Validation exception
        '500':
          description: Internal error occurred.
  /person/{personId}:
    get:
      tags:
        - person
      summary: Find person by ID
      description: Returns a single person
      operationId: getPersonById
      parameters:
        - name: personId
          in: path
          description: ID of person to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Person not found
        '500':
          description: Internal error occurred.
    delete:
      tags:
        - person
      summary: Delete a person
      description: delete a person
      operationId: deletePerson
      parameters:
        - name: personId
          in: path
          description: Person id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Person not found
        '400':
          description: Invalid ID supplied
        '200':
          description: Successful operation
        '500':
          description: Internal error occurred.
  /ticket:
    get: 
      tags:
        - ticket
      summary: Get list of tickets
      description: Get list of tickets
      operationId: getAllTickets
      parameters:
        - name: sort
          in: query
          description: A list of sorting fields is given, with "-" indicating descending order. Providing both ascending and descending instructions will trigger an error response.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - coordinates.x
                - coordinates.y
                - coordinates.id
                - person.id
                - person.weight
                - person.eyeColor
                - person.hairColor
                - person.country
                - name
                - creationDate
                - price
                - discount
                - refundable
                - type
                - -id
                - -coordinates.x
                - -coordinates.y
                - -coordinates.id
                - -person.id
                - -person.weight
                - -person.eyeColor
                - -person.hairColor
                - -person.country
                - -name
                - -creationDate
                - -price
                - -discount
                - -refundable
                - -type
        - name: filter
          in: query
          required: false
          description: An array of filtering fields is required, each containing the field name, filtering method in parentheses, and the filtering value. Incorrect value types will result in an error response.
          schema:
            type: array
            items:
              type: string
              example: id[eq]=1
              pattern: '^(id|person\.weight|person\.eyeColor|person\.hairColor|person\.country|person\.id|coordinates\.x|coordinates\.y|coordinates\.id|id|name|creationDate|price|discount|refundable|type)\[(eq|ne|gt|lt|lte|gte)\]=.+$'
          explode: true
        - name: page
          in: query
          required: false
          description: Specifies the page number for pagination. When used without the "pageSize" parameter, the default page size is set to 10. If neither "page" nor "pageSize" parameters are used, all tickets will be returned.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: This sets the page size for pagination. When used alone without the "page" parameter, it defaults to displaying the first page. If neither "page" nor "pageSize" parameters are specified, all tickets will be returned.
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                  $ref: '#/components/schemas/TicketsArray'
        '400':
          description: Validation exception
        '500':
          description: Internal error occurred.
        
    put:
      tags:
        - ticket
      summary: Update an existing ticket
      description: Update an existing ticket by Id
      operationId: updateTicket
      requestBody:
        description: Update an existent ticket
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Validation exception
        '404':
          description: Ticket not found
        '500':
          description: Internal error occurred.
    post:
      tags:
        - ticket
      summary: Add a new ticket
      description: Add a new ticket
      operationId: addTicket
      requestBody:
        description: Create a new ticket
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Validation exception
        '500':
          description: Internal error occurred.
  /ticket/{ticketId}:
    get:
      tags:
        - ticket
      summary: Find ticket by ID
      description: Returns a single ticket
      operationId: getTicketById
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid ID supplied
        '404':
          description: Ticket not found
        '500':
          description: Internal error occurred.
    delete:
      tags:
        - ticket
      summary: Delete a ticket
      description: delete a ticket
      operationId: deleteTicket
      parameters:
        - name: ticketId
          in: path
          description: Ticket id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Ticket not found
        '400':
          description: Invalid ID supplied
        '200':
          description: Successful operation
        '500':
          description: Internal error occurred.
  /ticket/getAverageTicketDiscount:
    get:
      tags:
        - ticket
      summary: Get average discount of tickets
      description: Returns an average discount value
      operationId: getAverageTicketDiscount
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: number
                xml:
                  name: "AveragePriceDiscount"
        '500':
          description: Internal error occurred.
  /ticket/getMinimalTicketByCreationDate:
    get:
      tags:
        - ticket
      summary: Find minimal ticket by creation date field
      description: Returns a single ticket
      operationId: getMinimalTicketByCreationDate
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Ticket not found
        '500':
          description: Internal error occurred.
  /ticket/getCheaperTicketsByPrice/{price}:
    get:
      tags:
        - ticket
      summary: Find tickets with the lower price than given
      description: Returns a list of tickets
      operationId: getCheaperTicketsByPrice
      parameters:
        - name: price
          in: path
          description: Minimal price
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                xml:
                  name: "Tickets"
                  wrapped: true
                items:
                  $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid price supplied
        '500':
          description: Internal error occurred.
components:
  schemas:
    Ticket:
      type: object
      xml:
        name: "Ticket"
      properties:
        id:
          type: integer
          format: int64
          example: 10
          minimum: 1
        name:
          type: string
          minLength: 1
          example: Ticket name
        coordinatesId:
          type: integer
          format: int64
          example: 40
        creationDate:
          type: string
          format: date-time
        price:
          type: integer
          format: int32
          minimum: 1
          example: 10
        discount:
          type: integer
          format: int64
          minimum: 1
          maximum: 101
          example: 40
        refundable:
          type: boolean
        type:
          type: string
          enum:
            - VIP
            - USUAL
            - BUDGETARY
            - CHEAP
        personId:
          type: integer
          format: int64
          example: 40
      required:
        - id
        - name
        - coordinates
        - creationDate
        - price
        - refundable
        - person
    Coordinates:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        x:
          type: number
          format: float
          example: 15.0
        y:
          type: number
          format: float
          minimum: -235
          example: 15.0
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        weight:
          type: number
          format: float
          minimum: 1
          example: 150.0
        eyeColor:
          type: string
          enum:
            - GREEN
            - RED
            - ORANGE
        hairColor:
          type: string
          enum:
            - RED
            - YELLOW
            - ORANGE
            - BROWN
        country:
          type: string
          enum:
            - RUSSIA
            - USA
            - FRANCE
            - SPAIN
            - JAPAN
      required:
        - hairColor
    CoordinatesArray:
      type: object
      properties:
        page:
          type: integer
          format: int64
          example: 0
        pagesTotal:
          type: integer
          format: int64
          example: 100
        pageSize:
          type: integer
          format: int64
          example: 100
        tickets:
          type: array
          xml:
            name: "Coordinates"
            wrapped: true
          items:
            $ref: '#/components/schemas/Coordinates'
    PersonArray:
      type: object
      properties:
        page:
          type: integer
          format: int64
          example: 0
        pagesTotal:
          type: integer
          format: int64
          example: 100
        pageSize:
          type: integer
          format: int64
          example: 100
        tickets:
          type: array
          xml:
            name: "Person"
            wrapped: true
          items:
            $ref: '#/components/schemas/Person'
    TicketsArray:
      type: object
      properties:
        page:
          type: integer
          format: int64
          example: 0
        pagesTotal:
          type: integer
          format: int64
          example: 100
        pageSize:
          type: integer
          format: int64
          example: 100
        tickets:
          type: array
          xml:
            name: "Ticket"
            wrapped: true
          items:
            $ref: '#/components/schemas/Ticket'
